---
title: "Automatic random construction of the audio files for the ecology practical"
author: "Paul PETIT"
format: pdf
editor: visual
---

::: {style="text-align: left"}
## Packages, functions and initialization

```{r setup, include=FALSE}
library(tidyverse)
library(here)
library(tuneR)
here("Strophe_Sampling_Functions.R") |>  source()
set.seed(256345)
```

Note: The `set.seed` command ensures the reproducibility of the sampling step.
If you want to repeat the experiment without reproducing it identically, you must change this number!

We will use the `tuneR` package to manipulate audio files with `R`.
Additionally, we import functions from a separate `R Script` to focus on the essentials in this notebook.

Here is a brief description of the functions and variables imported:

- `silences_44k` and `silences_48k` are two lists containing the possible lengths of silences.

- `individual_mix_audio_list` takes the path to a given bird and uses its audio recordings to return a newly ordered list of the strophes of that bird's song.

- `add_silences` takes the mixed audio list for a bird returned by `individual_mix_audio_list` and adds silences before returning a final audio file.

## Constructing the List of Created Audio Files

Next, we define the names of the species and individuals we will use.

```{r variables}
species <- list.files(here("Strophe_Bank_WAV"))[-3] # This index of 3 is because the third file should be Simplified_Names_File.md but if it's not the case, change it.
types <- list.files(here("Strophe_Bank_WAV", "Sylvia_atricapilla"))
indiv <- paste0("Individual", 1:4)
```

Then, we create a compartmentalized list to store all the audio files we will produce.
The first layer designates the species, the second layer is the type of audio (complete strophes, whistles, or warbles) for *Sylvia atricapilla*, and the final layer ($2^{nd}$ except for *S. atricapilla* where it's the $3^{rd}$) corresponds to the identification number of the individual.

```{r storage_list}
final_audio_list <- lapply(species, function(sp) {
        if (sp == "Sylvia_atricapilla"){
                sp_list <- lapply(types, function(tp){
                        type_list <- setNames(
                                vector("list", length(indiv)), indiv
                        )
                        return(type_list)
                })
                names(sp_list) <- types
        } else{
                sp_list <- setNames(vector("list", length(indiv)), indiv)
        }
        return(sp_list)
})

names(final_audio_list) <- species
```

Now, we just need to complete this list by creating the needed audio files.

```{r}
for (spec in species){
        if (spec == "Sylvia_atricapilla"){
                for (type in types){
                        for (ind in indiv){
                                list_audio <- here(
                                        "Strophe_Bank_WAV", spec, type, ind
                                ) |> individual_mix_audio_list()
                                samp_rates <- vector("integer", length(list_audio))
                                for (i in length(list_audio)){
                                        samp_rates <- list_audio[[i]]@samp.rate
                                }
                                if (all(samp_rates==48000)){
                                        silences <- silences_48k
                                } else if (all(samp_rates==44100)){
                                        silences <- silences_44k
                                } else{
                                        stop("Error! There is an issue with sampling rates values.")
                                }
                                final_audio_list[[spec]][[type]][[ind]] <-
                                        add_silences(list_audio, silences)
                        }
                }
        } else{
                for (ind in indiv){
                        list_audio <- here("Strophe_Bank_WAV", spec, ind) |>
                                individual_mix_audio_list()
                        samp_rates <- vector("integer", length(list_audio))
                        for (i in length(list_audio)){
                                samp_rates <- list_audio[[i]]@samp.rate
                        }
                        if (all(samp_rates==48000)){
                                silences <- silences_48k
                        } else if (all(samp_rates==44100)){
                                silences <- silences_44k
                        } else{
                                stop("Error! There is an issue with sampling rates values.")
                        }
                        final_audio_list[[spec]][[type]][[ind]] <-
                                add_silences(list_audio, silences)
                }
        }
}
```

## Downloading the Audio Files

Finally, each audio file needs to be downloaded into a specified folder with a relevant name.
To do this, we will create the subfolders needed within the `results` folder as we go along.

```{r}
for (sp in species){
        if (sp == "Sylvia_atricapilla"){
                for (type in types){
                        path <- here("results", sp, type)
                        create_folder(path)
                        for (i in 1:4){
                                name_file <- paste(
                                        type, sp, sep="_"
                                ) |> paste0(i, ".wav")
                                audio_file <-
                                final_audio_list[[sp]][[type]][[indiv[i]]]
                                ##### This part of the code is a solution I found to resolve an issue I enconter with writeWave function
                                audio_file <- as(audio_file, "WaveMC")
                                colnames(audio_file) <- c("FL", if (ncol(audio_file) > 1) "FR")
                                audio_file@.Data[which(is.na(audio_file@.Data)),1] <- 0
                                #####
                                writeWave(
                                        audio_file,
                                        here(path, name_file)
                                )
                        }
                }
        } else{
                path <- here("results", sp)
                create_folder(path)
                for (i in 1:4){
                        name_file <- paste0(sp, i, ".wav")
                        audio_file <- final_audio_list[[sp]][[indiv[i]]]
                        #### This part of the code is a solution I found to resolve an issue I enconter with writeWave function
                        audio_file <- as(audio_file, "WaveMC")
                        colnames(audio_file) <- c("FL", if (ncol(audio_file) > 1) "FR")
                        audio_file@.Data[which(is.na(audio_file@.Data)),1] <- 0
                        #####
                        writeWave(audio_file, here(path, name_file))
                }
        }
}
```
:::
